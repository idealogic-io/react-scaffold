{
  "Scaffold": "Шаблончик",
  "Project scaffold is in build progress": "Шаблончик в процессе разработки",
  "Home": "Главная",
  "Not found Page": "Страница не существует",
  "Landing": "Лэндос",
  "Contracts Interactions": "Контрактные взаимодействия",

  "ProjectDescription": {
    "article1": "Эта ветка была отколота от базового веб3 скефолда с целью создать шаблон для еще более быстрого создания и поднятия не сложных DApp приложений.  В проекте использован набор библиотек Rainbow-kit, wagmi и viem, которые \"с коробки\" полностью берут на себя управление и хендлинг всех вопросов связанных с подключением приложения к сети веб3, чтением и записью данными в сети веб3, мультиколами и многими другими функциями. ",
    "article2": "Из минусов данного подхода то что очень сложно кастомизировать логику взаимодейвия с блокчейном, если проект требует каких либо нестандартных решений в этом вопросе, т.к. вся \"подкапотная\" логика находится на стороне библиотек. Поэтому при создании больших и сложных DApp, требующих таких же сложных и не стандартных решений использовать этот скефолд не рекомендуется, в связи со сложностями кастомизации.",
    "article3": "Данный скефолд отлично подходит для мелких DApp с несложной логикой и позволяет максимально сократить time-to-market и время работы разработчика."
  },

  "WalletButton": {
    "connect": "Подключить кошелек",
    "unsupported": "Сеть не поддерживается"
  },

  "SignInButton": {
    "signIn": "Войти"
  },

  "ContractReadExample": {
    "tokenBalance": "Твой баланс {{tokenName}} токена: <bold>{{balance}} {{tokenSymbol}}</bold>",
    "article1": "В этой секции рассмотрен простейший точечный забор данных с блокчейна и смарт-контрактов при помощи хуков предоставляемых вагми. Абсолютно ничего сложного. Все подробности работы с хуком по чтению данных со смарт-контракта хорошо описаны в документации вагми (см. ссылку на лендосе). Стоит обратить внимание на параметр \"watch\", который позволяет обновлять данные в реальном времени по мере появления нового блока в сети. Если же обновление в реальном времени не нужно, то этот параметр можно убрать для более оптимального потребления ресурсов. Так же стоит обратить внимание что все числовые данные получаемые со смарт-контракта которые ты планируешь использовать в каких либо вычеслениях крайне рекомендуется оборачивать в Bignumber.js для последующего удобства работы с ними."
  },

  "ContractWriteExample": {
    "mint": "Сминтить 100 SCT",
    "scanner": "Посмотреть транзакцию на сканере",
    "article1": "А в данной секции рассмотрен простейший вызов транзакции через смарт контракт. При помощи хуков вагми осуществляется простейший хендлинг полного цикла транзакции. Например хук <bold>usePrepareContractWrite()</bold> отвечает за подготовку данных к транзакции и эстимацию успешности ее проведения. Если транзакция по какой то причине пройти не сможет то еще на этом этапе параметр isSuccess станет отрицательный (это можно использовать как маркер для дизейбла кнопки отвечающей за вызов). Если на данном этапе все хорошо то в дело включается хук <bold>useContractWrite()</bold>, который может принимать в себя конфиги из предыдущего хука. Он предоставляет множество параметров, но в данном примере рассмотрена только функция вызова: она есть двух типов синхронная и асинхронная. Я предпочитаю асинхронную, т.к. более комофртно хендлить дальнейшую часть жизенного цикла транзакции. После вызова данной функции мы при успешном флоу получим хеш новой транзакции. И вот этот хеш мы можем использовать в третьем хуке - <bold>useWaitForTransaction()</bold>. Этот хук дожидается окончательного результата тразакции и отдает соответсвующие данные. И вот только после данного этапа можно сказать, что жизненный цикл транзакции завершен."
  },

  "ContractExampleLvl2": {
    "staked": "Твой депозит: {{amount}} of {{tokenName}}.",
    "reward": "Доступная текущая награда: {{amount}} {{tokenName}}.",
    "claim": "Забрать награду!",
    "tokenBalance": "Ты можешь застейкать: {{balance}} {{tokenSymbol}}.",
    "max": "Макс.",
    "approve": "Разрешить",
    "stake": "Стекнуть",
    "stakeAmount": "Количество токенов",
    "article1": "В данном разделе показан пример более сложного но более приближенного к \"боевым условиям\" варианта чтения и записи данных в блокчейн. Здесь показан пример работы со стейкинг смарт-контрактом, в котором пользователь может депозитить средства и получать за это награду растущую с течением времени. Для чтения данных в этот раз был использован мультикол, который позволяет скомпоновать все интересующие нас гет-запросы в блокчейн в один запрос. При чем это могут быть гет-запросы к абсолютно разным смарт-контрактам. Главное условие чтобы все они находились на одной сети. В противном случае необходимо использовать отдельный инстанс мультикола для каждой сети в отдельности. Для записи данных использован все тот же хук что и в прошлом разделе, только в данном случае мы использовали еще один хук для хендлинга данных в инпуте и кнопки \"Макс.\". Плюс еще этот хук помогает нам разделить логику на два случая: когда нам надо сделать аппрув или же не надо (см. Allowance ERC-20)."
  }
}
